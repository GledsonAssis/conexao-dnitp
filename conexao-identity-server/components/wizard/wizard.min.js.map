{"version":3,"file":"components/wizard/wizard.min.js","mappings":"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","sources":["webpack://@govbr/dsgov/webpack/bootstrap","webpack://@govbr/dsgov/webpack/runtime/global","webpack://@govbr/dsgov/webpack/runtime/publicPath","webpack://@govbr/dsgov/./src/components/swipe/swipe.js","webpack://@govbr/dsgov/./src/components/wizard/wizard.js","webpack://@govbr/dsgov/./src/components/wizard/examples.pug"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl + \"../../\";","export class SwipeEventDispatcher {\n  constructor(element, options = {}) {\n    this.evtMap = {\n      SWIPE_DOWN: [],\n      SWIPE_LEFT: [],\n      SWIPE_RIGHT: [],\n      SWIPE_UP: [],\n    }\n    this.xDown = null\n    this.yDown = null\n    this.element = element\n    this.options = Object.assign({ triggerPercent: 0.3 }, options)\n    element.addEventListener(\n      'touchstart',\n      (evt) => {\n        return this.handleTouchStart(evt)\n      },\n      false\n    )\n    element.addEventListener(\n      'touchend',\n      (evt) => {\n        return this.handleTouchEnd(evt)\n      },\n      false\n    )\n  }\n\n  on(evt, cb) {\n    this.evtMap[evt].push(cb)\n  }\n\n  off(evt, lcb) {\n    this.evtMap[evt] = this.evtMap[evt].filter((cb) => {\n      return cb !== lcb\n    })\n  }\n\n  trigger(evt, data) {\n    this.evtMap[evt].map((handler) => {\n      return handler(data)\n    })\n  }\n\n  handleTouchStart(evt) {\n    this.xDown = evt.touches[0].clientX\n    this.yDown = evt.touches[0].clientY\n  }\n\n  handleTouchEnd(evt) {\n    const deltaX = evt.changedTouches[0].clientX - this.xDown\n    const deltaY = evt.changedTouches[0].clientY - this.yDown\n    const distMoved = Math.abs(\n      Math.abs(deltaX) > Math.abs(deltaY) ? deltaX : deltaY\n    )\n    const activePct = distMoved / this.element.offsetWidth\n    if (activePct > this.options.triggerPercent) {\n      if (Math.abs(deltaX) > Math.abs(deltaY)) {\n        deltaX < 0 ? this.trigger('SWIPE_LEFT') : this.trigger('SWIPE_RIGHT')\n      } else {\n        deltaY > 0 ? this.trigger('SWIPE_DOWN') : this.trigger('SWIPE_UP')\n      }\n    }\n  }\n}\nexport default SwipeEventDispatcher\n","import SwipeEventDispatcher from '../swipe/swipe'\nclass BRWizard {\n  constructor(name, component) {\n    this.name = name\n    this.component = component\n    // DOM elements\n    this.DOMstrings = {\n      stepFormPanelClass: 'wizard-panel',\n      // stepFormPanels: document.querySelectorAll('.wizard-panel'),\n      stepFormPanels: this.component.querySelectorAll('.wizard-panel'),\n      stepNextBtnClass: 'wizard-btn-next',\n      stepPrevBtnClass: 'wizard-btn-prev',\n      // stepsBar: document.querySelector('.wizard-progress'),\n      stepsBar: this.component.querySelector('.wizard-progress'),\n      stepsBarClass: 'wizard-progress',\n      stepsBtnClass: 'wizard-progress-btn',\n      // stepsBtns: document.querySelectorAll(`.wizard-progress-btn`),\n      stepsBtns: this.component.querySelectorAll('.wizard-progress-btn'),\n      // stepsForm: document.querySelector('.wizard-form'),\n      stepsForm: this.component.querySelector('.wizard-form'),\n    }\n    // remove class from a set of items\n    this.removeAttributes = (elemSet, attrName) => {\n      elemSet.forEach((elem) => {\n        elem.removeAttribute(attrName)\n      })\n    }\n    // return exect parent node of the element\n    this.findParent = (elem, parentClass) => {\n      let currentNode = elem\n      while (!currentNode.classList.contains(parentClass)) {\n        currentNode = currentNode.parentNode\n      }\n      return currentNode\n    }\n    // get active button step number\n    this.getActiveStep = (elem) => {\n      return Array.from(this.DOMstrings.stepsBtns).indexOf(elem)\n    }\n    // set all steps before clicked (and clicked too) to active\n    this.setActiveStep = (activeStepNum) => {\n      // remove active state from all the state\n      this.removeAttributes(this.DOMstrings.stepsBtns, 'active')\n      // this.removeAttributes(this.DOMstrings.stepsBtns, 'disabled')\n\n      // set picked items to active\n      this.DOMstrings.stepsBtns.forEach((elem, index) => {\n        if (index === activeStepNum) {\n          elem.removeAttribute('disabled')\n          elem.setAttribute('active', '')\n        }\n        // if (index > activeStepNum) {\n        //   elem.setAttribute('disabled', 'disabled')\n        // }\n      })\n    }\n    // get active panel\n    this.getActivePanel = () => {\n      let activePanel\n      this.DOMstrings.stepFormPanels.forEach((elem) => {\n        if (elem.hasAttribute('active')) {\n          activePanel = elem\n        }\n      })\n      return activePanel\n    }\n    // open active panel (and close unactive panels)\n    this.setActivePanel = (activePanelNum) => {\n      // remove active class from all the panels\n      this.removeAttributes(this.DOMstrings.stepFormPanels, 'active')\n      // show active panel\n      this.DOMstrings.stepFormPanels.forEach((elem, index) => {\n        if (index === activePanelNum) {\n          elem.setAttribute('active', '')\n        }\n      })\n    }\n    this.setStepsNum = () => {\n      this.DOMstrings.stepsBtns.forEach((elem, index) => {\n        elem.setAttribute('step', index + 1)\n      })\n    }\n    this.setStep = (num) => {\n      const activeStep = num <= this.DOMstrings.stepsBtns.length ? num - 1 : 0\n      this.setActiveStep(activeStep)\n      this.setActivePanel(activeStep)\n    }\n    this.collapseSteps = () => {\n      this.component.setAttribute('collapsed', '')\n    }\n    this.expandSteps = () => {\n      this.component.removeAttribute('collapsed')\n    }\n    this._setBehavior()\n  }\n\n  _setBehavior() {\n    // STEPS BAR CLICK FUNCTION\n    this.DOMstrings.stepsBar.addEventListener('click', (e) => {\n      // check if click target is a step button\n      const eventTarget = e.target\n      if (!eventTarget.classList.contains(`${this.DOMstrings.stepsBtnClass}`)) {\n        e.target.parentNode.click()\n        return\n      }\n      // get active button step number\n      const activeStep = this.getActiveStep(eventTarget)\n      // set all steps before clicked (and clicked too) to active\n      this.setActiveStep(activeStep)\n      // open active panel\n      this.setActivePanel(activeStep)\n    })\n    // PREV/NEXT BTNS CLICK\n    this.DOMstrings.stepsForm.addEventListener('click', (e) => {\n      const eventTarget = e.target\n      // check if we clicked on `PREV` or NEXT` buttons\n      if (\n        !(\n          eventTarget.classList.contains(\n            `${this.DOMstrings.stepPrevBtnClass}`\n          ) ||\n          eventTarget.classList.contains(`${this.DOMstrings.stepNextBtnClass}`)\n        )\n      ) {\n        return\n      }\n      // find active panel\n      const activePanel = this.findParent(\n        eventTarget,\n        `${this.DOMstrings.stepFormPanelClass}`\n      )\n      let activePanelNum = Array.from(this.DOMstrings.stepFormPanels).indexOf(\n        activePanel\n      )\n      // set active step and active panel onclick\n      if (\n        eventTarget.classList.contains(`${this.DOMstrings.stepPrevBtnClass}`)\n      ) {\n        activePanelNum -= 1\n        activePanel.style.left = '1%'\n      } else {\n        activePanelNum += 1\n        activePanel.style.left = '-1%'\n      }\n      this.setActiveStep(activePanelNum)\n      this.setActivePanel(activePanelNum)\n    })\n    // Set Steps label number\n    this.setStepsNum()\n    // Set default active step\n    if (this.component.hasAttribute('step')) {\n      this.setStep(this.component.getAttribute('step'))\n    }\n    // set steps buttons grid style if it needs to scroll horizontaly\n    if (\n      this.component.hasAttribute('scroll') &&\n      !this.component.hasAttribute('vertical')\n    ) {\n      const stepsWidth =\n        Math.round(100 / this.DOMstrings.stepsBtns.length) - 0.5\n      this.DOMstrings.stepsBar.style.gridTemplateColumns = `repeat(auto-fit, minmax(100px, ${stepsWidth}% ))`\n    }\n    // Swipe\n    const dispatcher = new SwipeEventDispatcher(this.DOMstrings.stepsBar)\n    if (this.component.hasAttribute('vertical')) {\n      dispatcher.on('SWIPE_LEFT', () => {\n        this.collapseSteps()\n      })\n      dispatcher.on('SWIPE_RIGHT', () => {\n        this.expandSteps()\n      })\n      this.DOMstrings.stepsForm.ontouchstart = () => {\n        this.collapseSteps()\n      }\n    } else {\n      this.DOMstrings.stepsBar.ontouchstart = () => {\n        this.expandSteps()\n      }\n      this.DOMstrings.stepsForm.ontouchstart = () => {\n        this.collapseSteps()\n      }\n    }\n  }\n}\nconst wizardList = []\nfor (const brWizard of window.document.querySelectorAll('.br-wizard')) {\n  wizardList.push(new BRWizard('br-wizard', brWizard))\n}\nexport default BRWizard\n","export default __webpack_public_path__ + \"components/wizard/examples.html\";"],"names":["__webpack_require__","g","globalThis","this","Function","e","window","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","Error","replace","p","constructor","element","options","evtMap","SWIPE_DOWN","SWIPE_LEFT","SWIPE_RIGHT","SWIPE_UP","xDown","yDown","Object","assign","triggerPercent","addEventListener","evt","handleTouchStart","handleTouchEnd","on","cb","push","off","lcb","filter","trigger","data","map","handler","touches","clientX","clientY","deltaX","changedTouches","deltaY","Math","abs","offsetWidth","BRWizard","name","component","DOMstrings","stepFormPanelClass","stepFormPanels","querySelectorAll","stepNextBtnClass","stepPrevBtnClass","stepsBar","querySelector","stepsBarClass","stepsBtnClass","stepsBtns","stepsForm","removeAttributes","elemSet","attrName","forEach","elem","removeAttribute","findParent","parentClass","currentNode","classList","contains","parentNode","getActiveStep","Array","from","indexOf","setActiveStep","activeStepNum","index","setAttribute","getActivePanel","activePanel","hasAttribute","setActivePanel","activePanelNum","setStepsNum","setStep","num","activeStep","collapseSteps","expandSteps","_setBehavior","eventTarget","target","click","style","left","getAttribute","stepsWidth","round","gridTemplateColumns","dispatcher","ontouchstart","wizardList","brWizard"],"sourceRoot":""}