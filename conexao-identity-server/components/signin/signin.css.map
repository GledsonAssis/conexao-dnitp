{"version":3,"file":"components/signin/signin.css","mappings":"AAEA;ECUE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAIA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;ADbF;ACeE;EACE;ADbJ;ACkBE;EACE;ADhBJ;AEdE;EDkCI;IACE;EDjBN;ECmBI;IACE;EDjBN;AACF;AEtBE;EDkCI;IACE;EDTN;ECWI;IACE;EDTN;AACF;AE9BE;EDkCI;IACE;EDDN;ECGI;IACE;EDDN;AACF;AEtCE;EDkCI;IACE;EDON;ECLI;IACE;EDON;AACF;ACDE;EAGE;EACA;EACA;ADCJ;ACKI;EAGE;ADLN;ACEI;EAGE;ADFN;ACDI;EAGE;ADCN;ACJI;EAGE;ADIN;ACEE;EAGE;EACA;EACA;ADFJ;ACII;EAGE;EACA;EACA;EACA;ADJN;ACQE;EAGE;EACA;ADRJ;ACUI;EAGE;EACA;EACA;EACA;ADVN;ACcE;EE5BA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EFoBE;EACA;ADFJ;ACQI;EAGE;EAEE;ADTR;ACII;EAGE;EAEE;ADLR;ACAI;EAGE;ADAN;ACHI;EAGE;EAEE;ADER;ACKE;EACE;ADHJ;AG5EE;EACE;AH8EJ;AG3EE;EAEE;EACA;EACA;EACA;AH4EJ;AG1II;EACE;AH4IN;AGxII;EACE;AH0IN;ACJE;EAGE;EACA;ADIJ;ACFI;EACE;EACA;ADIN;ACGI;EACE;EACA;ADDN;ACQM;EACE;ADNR;AAvKE;EACE;EACA;AAyKJ,C","sources":["webpack://@govbr/dsgov/./src/components/signin/_signin.scss","webpack://@govbr/dsgov/./src/partial/scss/mixins/_button.scss","webpack://@govbr/dsgov/./src/partial/scss/mixins/_grid.scss","webpack://@govbr/dsgov/./src/partial/scss/mixins/_states.scss"],"sourcesContent":["@import \"../../partial/scss/base\";\n\n.#{$prefix}button {\n  @include button;\n\n  &.sign-in {\n    --button-background: var(--color-secondary-02);\n    z-index: var(--z-index-layer-0);\n  }\n}\n","@mixin button {\n  @include button-tokens;\n  @include button-base;\n  @include button-block;\n  @include button-circle;\n  @include button-sizes;\n  @include button-emphasis;\n  @include button-colors;\n  @include button-states;\n}\n\n@mixin button-tokens {\n  --button-background: transparent;\n  --button-border: transparent;\n  --button-color: var(--interactive);\n  --button-radius: 100em;\n  --button-font-size: var(--font-size-scale-up-01);\n  --button-font-weight: var(--font-weight-semi-bold);\n  --button-xsmall: 24px;\n  --button-small: 32px;\n  --button-medium: 40px;\n  --button-large: 48px;\n  --button-size: var(--button-medium);\n  --button-padding: 0 var(--spacing-scale-3x);\n  --button-img: 20px;\n}\n\n@mixin button-base {\n  --interactive-rgb: var(--rgb-primary-default);\n  align-items: center;\n  background-color: var(--button-background);\n  border: 1px solid var(--button-border);\n  border-radius: var(--button-radius);\n  color: var(--button-color);\n  cursor: pointer;\n  display: inline-flex;\n  font-size: var(--button-font-size);\n  font-weight: var(--button-font-weight);\n  height: var(--button-size);\n  justify-content: center;\n  padding: var(--button-padding);\n  text-align: center;\n  vertical-align: middle;\n  white-space: nowrap;\n  width: auto;\n\n  img {\n    max-height: var(--button-img);\n  }\n}\n\n@mixin button-block {\n  &.block {\n    width: 100%;\n  }\n  @each $breakpoint in \"sm\", \"md\", \"lg\", \"xl\" {\n    @include media-breakpoint-up(#{$breakpoint}) {\n      &.block-#{$breakpoint} {\n        width: 100%;\n      }\n      &.auto-#{$breakpoint} {\n        width: auto;\n      }\n    }\n  }\n}\n\n@mixin button-circle {\n  &.circle,\n  &[circle],\n  &.is-circle {\n    border-radius: 50%;\n    padding: 0;\n    width: var(--button-size);\n  }\n}\n\n@mixin button-sizes {\n  @each $size in \"xsmall\", \"small\", \"medium\", \"large\" {\n    &.#{$size},\n    &[#{$size}],\n    &.is-#{$size} {\n      --button-size: var(--button-#{$size});\n    }\n  }\n}\n\n@mixin button-emphasis {\n  &.primary,\n  &[primary],\n  &.is-primary {\n    --interactive-rgb: var(--rgb-secondary-01);\n    --button-background: var(--color-primary-default);\n    --button-color: var(--color-secondary-01);\n\n    &.inverted,\n    &.is-inverted,\n    &[inverted] {\n      --interactive-rgb: var(--rgb-primary-default);\n      --hover: var(--surface-opacity-xs, 0.16);\n      --button-background: var(--color-secondary-01);\n      --button-color: var(--color-primary-default);\n    }\n  }\n\n  &.secondary,\n  &[secondary],\n  &.is-secondary {\n    --button-background: var(--color-secondary-01);\n    --button-border: var(--color-primary-default);\n\n    &.inverted,\n    &.is-inverted,\n    &[inverted] {\n      --hover: var(--surface-opacity-xs, 0.16);\n      --button-background: var(--color-primary-default);\n      --button-border: var(--color-secondary-01);\n      --button-color: var(--color-secondary-01);\n    }\n  }\n\n  &.inverted,\n  &.is-inverted,\n  &[inverted] {\n    @include dark-mode;\n    --interactive: var(--color-secondary-01);\n    --interactive-rgb: var(--rgb-secondary-01);\n  }\n}\n\n@mixin button-colors {\n  @each $color in \"danger\", \"success\", \"warning\", \"info\" {\n    &.#{$color},\n    &[#{$color}],\n    &.is-#{$color} {\n      --button-background: var(--color-#{$color});\n      @if $color != \"warning\" {\n        --button-color: var(--color-secondary-01);\n      }\n    }\n  }\n}\n\n@mixin button-states {\n  &:disabled {\n    cursor: not-allowed;\n  }\n\n  &:not(:disabled) {\n    @include focus;\n    @include hover;\n  }\n\n  &.active,\n  &.is-active,\n  &[active] {\n    --button-background: var(--active);\n    --button-color: var(--color-secondary-01);\n\n    &:hover {\n      --interactive-rgb: var(--rgb-secondary-01);\n      --hover: var(--surface-opacity-sm, 0.3);\n    }\n  }\n\n  &.loading,\n  &[loading],\n  &.is-loading {\n    &::after {\n      border-color: var(--button-color) var(--button-color) transparent;\n      border-style: solid;\n    }\n\n    &.primary,\n    &.danger,\n    &.success,\n    &.info {\n      &::after {\n        border-color: var(--button-color) var(--button-color)\n          transparent;\n      }\n    }\n  }\n}\n","// Dependência para calcular divisão\n@use \"sass:math\";\n\n// Função para retornar próximo breakpoint\n@function next-breakpoint($breakpoint) {\n  @if $breakpoint == \"xs\" {\n    @return \"sm\";\n  }\n  @if $breakpoint == \"sm\" {\n    @return \"md\";\n  }\n  @if $breakpoint == \"md\" {\n    @return \"lg\";\n  }\n  @if $breakpoint == \"lg\" {\n    @return \"xl\";\n  }\n}\n\n/// Aplica estilos no breakpoint informado para cima\n/// Modo de uso: @include media-breakpoint-up(sm) {}\n@mixin media-breakpoint-up($breakpoint) {\n  $size: map-get($breakpoints, $breakpoint);\n  @media (min-width: $size) {\n    @content;\n  }\n}\n\n/// Aplica estilos no breakpoint informado para baixo\n/// Modo de uso: @include media-breakpoint-down(sm) {}\n@mixin media-breakpoint-down($breakpoint) {\n  $value: map-get($breakpoints, next-breakpoint($breakpoint)) - 1px;\n  @media (max-width: $value) {\n    @content;\n  }\n}\n\n/// Cria as colunas de acordo com número de colunas informado.\n/// As colunas terão breakpoint caso seja ele seja informado.\n/// Modo de uso: @include columns(4); ou @include columns(8, \"sm\");\n@mixin columns($columns, $breakpoint: null) {\n  .col#{if($breakpoint, \"-#{$breakpoint}\", \"\")} {\n    flex: 1 0 0%;\n    min-width: math.div(1, $columns) * 100%;\n  }\n  .col#{if($breakpoint, \"-#{$breakpoint}\", \"\")}-auto {\n    flex: 0 0 auto;\n    width: auto;\n  }\n  @for $i from 1 through $columns {\n    .col#{if($breakpoint, \"-#{$breakpoint}\", \"\")}-#{$i} {\n      flex-basis: math.div($i, $columns) * 100%;\n      max-width: math.div($i, $columns) * 100%;\n    }\n  }\n}\n\n/// Cria os containers responsivos para a Grid.\n/// A versão fluida sempre terá largura de 100%.\n/// As versões fixas recebem limite de largura de acordo com o breakpoint.\n/// Modo de uso: @include grid-breakpoint(\"576px\", \"sm\", \"tablet\");\n@mixin grid-breakpoint($var, $breakpoint, $name) {\n  @media (min-width: $var) {\n    .container,\n    .container-sm,\n    .container-md,\n    .container-lg,\n    .container-xl,\n    .container-fluid {\n      --grid-margin: var(--grid-#{$name}-margin);\n    }\n\n    .row {\n      --grid-gutter: var(--grid-#{$name}-gutter);\n    }\n    @if $breakpoint == \"sm\" {\n      .container,\n      .container-sm {\n        --grid-maxwidth: calc(var(--grid-breakpoint-#{$breakpoint}) - var(--grid-#{$name}-margin));\n      }\n    }\n    @if $breakpoint == \"md\" {\n      .container,\n      .container-sm,\n      .container-md {\n        --grid-maxwidth: calc(var(--grid-breakpoint-#{$breakpoint}) - var(--grid-#{$name}-margin));\n      }\n    }\n    @if $breakpoint == \"lg\" {\n      .container,\n      .container-sm,\n      .container-md,\n      .container-lg {\n        --grid-maxwidth: calc(var(--grid-breakpoint-#{$breakpoint}) - var(--grid-#{$name}-margin));\n      }\n    }\n    @if $breakpoint == \"xl\" {\n      .container,\n      .container-sm,\n      .container-md,\n      .container-lg,\n      .container-xl {\n        --grid-maxwidth: calc(var(--grid-breakpoint-#{$breakpoint}) - var(--grid-#{$name}-margin));\n      }\n    }\n    @include columns($grid-desktop-columns, $breakpoint);\n  }\n}\n","// Desabilitado\n@mixin disabled {\n  cursor: not-allowed;\n  opacity: var(--disabled);\n\n  * {\n    pointer-events: none;\n  }\n}\n\n// Hover\n@mixin hover {\n  &:not(:disabled) {\n    &:hover {\n      background-image: linear-gradient(rgba(var(--interactive-rgb), var(--hover)),\n      rgba(var(--interactive-rgb), var(--hover)));\n    }\n\n    &:active {\n      background-image: linear-gradient(rgba(var(--interactive-rgb), var(--pressed)),\n      rgba(var(--interactive-rgb), var(--pressed)));\n    }\n  }\n}\n\n/// Focus\n/// De acordo com o Fundamento Estado existem 2 tipos de focus:\n/// 1. Foco padrão: É a versão tracejada.\n/// 2. Foco tênue: É a versão atenuada.\n///\n/// Ambos podem ser aplicados em navegação por tab, porém apenas o focus tênue\n/// pode ser aplicado ao clicar no componente. Você precisará especificar se o\n/// focus será aplicado como focus ou focus-visible.\n///\n/// 1. Foco padrão:\n///    Aplicado somente em focus-visible.\n///\n///    Modo de uso:\n///      seletor {\n///        @include focus-soft;\n///      }\n///\n/// 2. Foco tênue:\n///    Pode ser aplicado em focus ou focus-visible.\n///\n///    Modo de uso:\n///      seletor {\n///        &:focus {\n///          outline: none;\n///        }\n///        &:focus-visible,\n///        &.focus-visible {\n///          @include focus-soft;\n///        }\n///      }\n///\n///      ou\n///\n///      seletor {\n///        &:focus,\n///        &:focus-visible,\n///        &.focus-visible {\n///          @include focus-soft;\n///        }\n///      }\n@mixin focus {\n  &:focus {\n    outline: none;\n  }\n\n  &.focus-visible,\n  &:focus-visible {\n    outline-color: var(--focus);\n    outline-offset: var(--focus-offset);\n    outline-style: var(--focus-style);\n    outline-width: var(--focus-width);\n  }\n}\n\n@mixin focus-soft {\n  border-color: var(--focus) !important;\n  box-shadow: 0 0 0 var(--surface-width-md) var(--focus);\n  outline: none;\n}\n\n// Ativo\n@mixin active {\n  background: var(--active);\n  color: var(--color-secondary-01);\n}\n\n// Dark mode\n@mixin dark-mode {\n  --color: var(--color-dark);\n  --color-rgb: var(--color-dark-rgb);\n  --color-hsl: var(--color-dark-hsl);\n  --text-color: var(--color);\n  --interactive: var(--interactive-dark);\n  --interactive-rgb: var(--interactive-dark-rgb);\n  --interactive-dark-hsl: var(--interactive-dark-hsl);\n  --visited: var(--gray-20);\n  --hover: var(--surface-opacity-sm);\n  --pressed: var(--surface-opacity-lg);\n  --focus-color: var(--gold-vivid-20);\n  --focus: var(--gold-vivid-20);\n  --active: var(--pure-0);\n}\n@mixin light-mode {\n  --color: var(--color-light);\n  --color-rgb: var(--color-light-rgb);\n  --color-hsl: var(--color-light-hsl);\n  --text-color: var(--color);\n  --interactive: var(--interactive-light);\n  --interactive-rgb: var(--interactive-light-rgb);\n  --interactive-hsl: var(--interactive-light-hsl);\n  --visited: var(--blue-warm-vivid-80);\n  --hover: var(--surface-opacity-xs);\n  --pressed: var(--surface-opacity-md);\n  --focus-color: var(--gold-vivid-40);\n  --focus: var(--gold-vivid-40);\n  --active: var(--blue-warm-vivid-80);\n}\n"],"names":[],"sourceRoot":""}